
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';


/**
 * Model ContributionSubscription
 */

export type ContributionSubscription = {
  amountInCents: number
  email: string
  id: number
  state: SubscriptionState
  externalId: string | null
  experimentId: string | null
  ambassadorId: number | null
}

/**
 * Model Contribution
 */

export type Contribution = {
  amountInCents: number
  email: string
  id: number
  state: ContributionState
  subscriptionId: number | null
  externalId: string | null
  createdAt: Date
  experimentId: string | null
  ambassadorId: number | null
}

/**
 * Model User
 */

export type User = {
  admissionYear: number
  createdAt: Date
  degree: string
  email: string
  firstName: string
  id: number
  lastName: string
  mentorshipInterest: boolean
  tutorshipInterest: boolean
  university: string
  volunteeringInterest: boolean
  ambassadorId: number | null
}

/**
 * Model Ambassador
 */

export type Ambassador = {
  id: number
  isActive: boolean
  createAT: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const SubscriptionState: {
  pending: 'pending',
  active: 'active',
  cancelled: 'cancelled'
};

export type SubscriptionState = (typeof SubscriptionState)[keyof typeof SubscriptionState]


export const ContributionState: {
  pending: 'pending',
  completed: 'completed',
  cancelled: 'cancelled'
};

export type ContributionState = (typeof ContributionState)[keyof typeof ContributionState]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ContributionSubscriptions
 * const contributionSubscriptions = await prisma.contributionSubscription.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ContributionSubscriptions
   * const contributionSubscriptions = await prisma.contributionSubscription.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.contributionSubscription`: Exposes CRUD operations for the **ContributionSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributionSubscriptions
    * const contributionSubscriptions = await prisma.contributionSubscription.findMany()
    * ```
    */
  get contributionSubscription(): Prisma.ContributionSubscriptionDelegate<GlobalReject>;

  /**
   * `prisma.contribution`: Exposes CRUD operations for the **Contribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contributions
    * const contributions = await prisma.contribution.findMany()
    * ```
    */
  get contribution(): Prisma.ContributionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.ambassador`: Exposes CRUD operations for the **Ambassador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ambassadors
    * const ambassadors = await prisma.ambassador.findMany()
    * ```
    */
  get ambassador(): Prisma.AmbassadorDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.16.1
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  /**
   * Allows creating `select` or `include` outside of the main statement
   * From https://github.com/prisma/prisma/issues/3372#issuecomment-762296484
   */

  type Cast<A1, A2> = A1 extends A2 ? A1 : A2;

  /**
   * `Exact` forces a type to comply by another type. It will need to be a subset
   * and must have exactly the same properties, no more, no less.
   */
  type Exact<A, W> = A & Cast<{
    [K in keyof A]: K extends keyof W ? A[K] : never
  }, W>;

  type Narrow<A, W = unknown> =
      A & {[K in keyof A]: NarrowAt<A, W, K>};

  type NarrowAt<A, W, K extends keyof A, AK = A[K], WK = Att<W, K>> =
      WK extends Widen<infer T> ? T :
      AK extends Narrowable ? AK & WK :
      Narrow<AK, WK>;

  type Att<O, K> = K extends keyof O ? O[K] : unknown;

  type Widen<A> = {[type]: A};

  type Narrowable =
  | string
  | number
  | bigint
  | boolean
  | [];

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<Narrow<S, V>, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    ContributionSubscription: 'ContributionSubscription',
    Contribution: 'Contribution',
    User: 'User',
    Ambassador: 'Ambassador'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model ContributionSubscription
   */


  export type AggregateContributionSubscription = {
    count: ContributionSubscriptionCountAggregateOutputType | null
    avg: ContributionSubscriptionAvgAggregateOutputType | null
    sum: ContributionSubscriptionSumAggregateOutputType | null
    min: ContributionSubscriptionMinAggregateOutputType | null
    max: ContributionSubscriptionMaxAggregateOutputType | null
  }

  export type ContributionSubscriptionAvgAggregateOutputType = {
    amountInCents: number
    id: number
    ambassadorId: number | null
  }

  export type ContributionSubscriptionSumAggregateOutputType = {
    amountInCents: number
    id: number
    ambassadorId: number | null
  }

  export type ContributionSubscriptionMinAggregateOutputType = {
    amountInCents: number
    email: string | null
    id: number
    state: SubscriptionState | null
    externalId: string | null
    experimentId: string | null
    ambassadorId: number | null
  }

  export type ContributionSubscriptionMaxAggregateOutputType = {
    amountInCents: number
    email: string | null
    id: number
    state: SubscriptionState | null
    externalId: string | null
    experimentId: string | null
    ambassadorId: number | null
  }

  export type ContributionSubscriptionCountAggregateOutputType = {
    amountInCents: number
    email: number | null
    id: number
    state: number | null
    externalId: number | null
    experimentId: number | null
    ambassadorId: number | null
    _all: number
  }


  export type ContributionSubscriptionAvgAggregateInputType = {
    amountInCents?: true
    id?: true
    ambassadorId?: true
  }

  export type ContributionSubscriptionSumAggregateInputType = {
    amountInCents?: true
    id?: true
    ambassadorId?: true
  }

  export type ContributionSubscriptionMinAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    externalId?: true
    experimentId?: true
    ambassadorId?: true
  }

  export type ContributionSubscriptionMaxAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    externalId?: true
    experimentId?: true
    ambassadorId?: true
  }

  export type ContributionSubscriptionCountAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    externalId?: true
    experimentId?: true
    ambassadorId?: true
    _all?: true
  }

  export type ContributionSubscriptionAggregateArgs = {
    /**
     * Filter which ContributionSubscription to aggregate.
    **/
    where?: ContributionSubscriptionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of ContributionSubscriptions to fetch.
    **/
    orderBy?: Enumerable<ContributionSubscriptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ContributionSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionSubscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionSubscriptions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContributionSubscriptions
    **/
    count?: true | ContributionSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ContributionSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ContributionSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ContributionSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ContributionSubscriptionMaxAggregateInputType
  }

  export type GetContributionSubscriptionAggregateType<T extends ContributionSubscriptionAggregateArgs> = {
    [P in keyof T & keyof AggregateContributionSubscription]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributionSubscription[P]>
      : GetScalarType<T[P], AggregateContributionSubscription[P]>
  }



  export type ContributionSubscriptionSelect = {
    amountInCents?: boolean
    email?: boolean
    id?: boolean
    state?: boolean
    externalId?: boolean
    experimentId?: boolean
    ambassadorId?: boolean
    referencedBy?: boolean | AmbassadorArgs
    contributions?: boolean | ContributionFindManyArgs
    users?: boolean | UserFindManyArgs
  }

  export type ContributionSubscriptionInclude = {
    referencedBy?: boolean | AmbassadorArgs
    contributions?: boolean | ContributionFindManyArgs
    users?: boolean | UserFindManyArgs
  }

  export type ContributionSubscriptionGetPayload<
    S extends boolean | null | undefined | ContributionSubscriptionArgs,
    U = keyof S
      > = S extends true
        ? ContributionSubscription
    : S extends undefined
    ? never
    : S extends ContributionSubscriptionArgs | ContributionSubscriptionFindManyArgs
    ?'include' extends U
    ? ContributionSubscription  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['include'][P]> | null :
        P extends 'contributions'
        ? Array < ContributionGetPayload<S['include'][P]>>  :
        P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContributionSubscription ?ContributionSubscription [P]
  : 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['select'][P]> | null :
        P extends 'contributions'
        ? Array < ContributionGetPayload<S['select'][P]>>  :
        P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : ContributionSubscription
  : ContributionSubscription


  type ContributionSubscriptionCountArgs = Merge<
    Omit<ContributionSubscriptionFindManyArgs, 'select' | 'include'> & {
      select?: ContributionSubscriptionCountAggregateInputType | true
    }
  >

  export interface ContributionSubscriptionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ContributionSubscription that matches the filter.
     * @param {ContributionSubscriptionFindUniqueArgs} args - Arguments to find a ContributionSubscription
     * @example
     * // Get one ContributionSubscription
     * const contributionSubscription = await prisma.contributionSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContributionSubscriptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContributionSubscriptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContributionSubscription'> extends True ? CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>> : CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription | null >, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T> | null >>

    /**
     * Find the first ContributionSubscription that matches the filter.
     * @param {ContributionSubscriptionFindFirstArgs} args - Arguments to find a ContributionSubscription
     * @example
     * // Get one ContributionSubscription
     * const contributionSubscription = await prisma.contributionSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContributionSubscriptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContributionSubscriptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContributionSubscription'> extends True ? CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>> : CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription | null >, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T> | null >>

    /**
     * Find zero or more ContributionSubscriptions that matches the filter.
     * @param {ContributionSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributionSubscriptions
     * const contributionSubscriptions = await prisma.contributionSubscription.findMany()
     * 
     * // Get first 10 ContributionSubscriptions
     * const contributionSubscriptions = await prisma.contributionSubscription.findMany({ take: 10 })
     * 
     * // Only select the `amountInCents`
     * const contributionSubscriptionWithAmountInCentsOnly = await prisma.contributionSubscription.findMany({ select: { amountInCents: true } })
     * 
    **/
    findMany<T extends ContributionSubscriptionFindManyArgs>(
      args?: SelectSubset<T, ContributionSubscriptionFindManyArgs>
    ): CheckSelect<T, Promise<Array<ContributionSubscription>>, Promise<Array<ContributionSubscriptionGetPayload<T>>>>

    /**
     * Create a ContributionSubscription.
     * @param {ContributionSubscriptionCreateArgs} args - Arguments to create a ContributionSubscription.
     * @example
     * // Create one ContributionSubscription
     * const ContributionSubscription = await prisma.contributionSubscription.create({
     *   data: {
     *     // ... data to create a ContributionSubscription
     *   }
     * })
     * 
    **/
    create<T extends ContributionSubscriptionCreateArgs>(
      args: SelectSubset<T, ContributionSubscriptionCreateArgs>
    ): CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>>

    /**
     * Delete a ContributionSubscription.
     * @param {ContributionSubscriptionDeleteArgs} args - Arguments to delete one ContributionSubscription.
     * @example
     * // Delete one ContributionSubscription
     * const ContributionSubscription = await prisma.contributionSubscription.delete({
     *   where: {
     *     // ... filter to delete one ContributionSubscription
     *   }
     * })
     * 
    **/
    delete<T extends ContributionSubscriptionDeleteArgs>(
      args: SelectSubset<T, ContributionSubscriptionDeleteArgs>
    ): CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>>

    /**
     * Update one ContributionSubscription.
     * @param {ContributionSubscriptionUpdateArgs} args - Arguments to update one ContributionSubscription.
     * @example
     * // Update one ContributionSubscription
     * const contributionSubscription = await prisma.contributionSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributionSubscriptionUpdateArgs>(
      args: SelectSubset<T, ContributionSubscriptionUpdateArgs>
    ): CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>>

    /**
     * Delete zero or more ContributionSubscriptions.
     * @param {ContributionSubscriptionDeleteManyArgs} args - Arguments to filter ContributionSubscriptions to delete.
     * @example
     * // Delete a few ContributionSubscriptions
     * const { count } = await prisma.contributionSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributionSubscriptionDeleteManyArgs>(
      args?: SelectSubset<T, ContributionSubscriptionDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more ContributionSubscriptions.
     * @param {ContributionSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributionSubscriptions
     * const contributionSubscription = await prisma.contributionSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributionSubscriptionUpdateManyArgs>(
      args: SelectSubset<T, ContributionSubscriptionUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one ContributionSubscription.
     * @param {ContributionSubscriptionUpsertArgs} args - Arguments to update or create a ContributionSubscription.
     * @example
     * // Update or create a ContributionSubscription
     * const contributionSubscription = await prisma.contributionSubscription.upsert({
     *   create: {
     *     // ... data to create a ContributionSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributionSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends ContributionSubscriptionUpsertArgs>(
      args: SelectSubset<T, ContributionSubscriptionUpsertArgs>
    ): CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription>, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T>>>

    /**
     * Count the number of ContributionSubscriptions.
     * @param {ContributionSubscriptionCountArgs} args - Arguments to filter ContributionSubscriptions to count.
     * @example
     * // Count the number of ContributionSubscriptions
     * const count = await prisma.contributionSubscription.count({
     *   where: {
     *     // ... the filter for the ContributionSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends ContributionSubscriptionCountArgs>(
      args?: Subset<T, ContributionSubscriptionCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContributionSubscription.
     * @param {ContributionSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionSubscriptionAggregateArgs>(args: Subset<T, ContributionSubscriptionAggregateArgs>): Promise<GetContributionSubscriptionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributionSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributionSubscriptionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    referencedBy<T extends AmbassadorArgs = {}>(args?: Subset<T, AmbassadorArgs>): CheckSelect<T, Prisma__AmbassadorClient<Ambassador | null >, Prisma__AmbassadorClient<AmbassadorGetPayload<T> | null >>;

    contributions<T extends ContributionFindManyArgs = {}>(args?: Subset<T, ContributionFindManyArgs>): CheckSelect<T, Promise<Array<Contribution>>, Promise<Array<ContributionGetPayload<T>>>>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContributionSubscription findUnique
   */
  export type ContributionSubscriptionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * Throw an Error if a ContributionSubscription can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionSubscription to fetch.
    **/
    where: ContributionSubscriptionWhereUniqueInput
  }


  /**
   * ContributionSubscription findFirst
   */
  export type ContributionSubscriptionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * Throw an Error if a ContributionSubscription can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContributionSubscription to fetch.
    **/
    where?: ContributionSubscriptionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of ContributionSubscriptions to fetch.
    **/
    orderBy?: Enumerable<ContributionSubscriptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContributionSubscriptions.
    **/
    cursor?: ContributionSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionSubscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionSubscriptions.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of ContributionSubscriptions.
    **/
    distinct?: Enumerable<ContributionSubscriptionScalarFieldEnum>
  }


  /**
   * ContributionSubscription findMany
   */
  export type ContributionSubscriptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * Filter, which ContributionSubscriptions to fetch.
    **/
    where?: ContributionSubscriptionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of ContributionSubscriptions to fetch.
    **/
    orderBy?: Enumerable<ContributionSubscriptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContributionSubscriptions.
    **/
    cursor?: ContributionSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContributionSubscriptions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContributionSubscriptions.
    **/
    skip?: number
    distinct?: Enumerable<ContributionSubscriptionScalarFieldEnum>
  }


  /**
   * ContributionSubscription create
   */
  export type ContributionSubscriptionCreateArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * The data needed to create a ContributionSubscription.
    **/
    data: XOR<ContributionSubscriptionUncheckedCreateInput, ContributionSubscriptionCreateInput>
  }


  /**
   * ContributionSubscription update
   */
  export type ContributionSubscriptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * The data needed to update a ContributionSubscription.
    **/
    data: XOR<ContributionSubscriptionUncheckedUpdateInput, ContributionSubscriptionUpdateInput>
    /**
     * Choose, which ContributionSubscription to update.
    **/
    where: ContributionSubscriptionWhereUniqueInput
  }


  /**
   * ContributionSubscription updateMany
   */
  export type ContributionSubscriptionUpdateManyArgs = {
    data: XOR<ContributionSubscriptionUncheckedUpdateManyInput, ContributionSubscriptionUpdateManyMutationInput>
    where?: ContributionSubscriptionWhereInput
  }


  /**
   * ContributionSubscription upsert
   */
  export type ContributionSubscriptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * The filter to search for the ContributionSubscription to update in case it exists.
    **/
    where: ContributionSubscriptionWhereUniqueInput
    /**
     * In case the ContributionSubscription found by the `where` argument doesn't exist, create a new ContributionSubscription with this data.
    **/
    create: XOR<ContributionSubscriptionUncheckedCreateInput, ContributionSubscriptionCreateInput>
    /**
     * In case the ContributionSubscription was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ContributionSubscriptionUncheckedUpdateInput, ContributionSubscriptionUpdateInput>
  }


  /**
   * ContributionSubscription delete
   */
  export type ContributionSubscriptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
    /**
     * Filter which ContributionSubscription to delete.
    **/
    where: ContributionSubscriptionWhereUniqueInput
  }


  /**
   * ContributionSubscription deleteMany
   */
  export type ContributionSubscriptionDeleteManyArgs = {
    where?: ContributionSubscriptionWhereInput
  }


  /**
   * ContributionSubscription without action
   */
  export type ContributionSubscriptionArgs = {
    /**
     * Select specific fields to fetch from the ContributionSubscription
    **/
    select?: ContributionSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionSubscriptionInclude | null
  }



  /**
   * Model Contribution
   */


  export type AggregateContribution = {
    count: ContributionCountAggregateOutputType | null
    avg: ContributionAvgAggregateOutputType | null
    sum: ContributionSumAggregateOutputType | null
    min: ContributionMinAggregateOutputType | null
    max: ContributionMaxAggregateOutputType | null
  }

  export type ContributionAvgAggregateOutputType = {
    amountInCents: number
    id: number
    subscriptionId: number | null
    ambassadorId: number | null
  }

  export type ContributionSumAggregateOutputType = {
    amountInCents: number
    id: number
    subscriptionId: number | null
    ambassadorId: number | null
  }

  export type ContributionMinAggregateOutputType = {
    amountInCents: number
    email: string | null
    id: number
    state: ContributionState | null
    subscriptionId: number | null
    externalId: string | null
    createdAt: Date | null
    experimentId: string | null
    ambassadorId: number | null
  }

  export type ContributionMaxAggregateOutputType = {
    amountInCents: number
    email: string | null
    id: number
    state: ContributionState | null
    subscriptionId: number | null
    externalId: string | null
    createdAt: Date | null
    experimentId: string | null
    ambassadorId: number | null
  }

  export type ContributionCountAggregateOutputType = {
    amountInCents: number
    email: number | null
    id: number
    state: number | null
    subscriptionId: number | null
    externalId: number | null
    createdAt: number | null
    experimentId: number | null
    ambassadorId: number | null
    _all: number
  }


  export type ContributionAvgAggregateInputType = {
    amountInCents?: true
    id?: true
    subscriptionId?: true
    ambassadorId?: true
  }

  export type ContributionSumAggregateInputType = {
    amountInCents?: true
    id?: true
    subscriptionId?: true
    ambassadorId?: true
  }

  export type ContributionMinAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    subscriptionId?: true
    externalId?: true
    createdAt?: true
    experimentId?: true
    ambassadorId?: true
  }

  export type ContributionMaxAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    subscriptionId?: true
    externalId?: true
    createdAt?: true
    experimentId?: true
    ambassadorId?: true
  }

  export type ContributionCountAggregateInputType = {
    amountInCents?: true
    email?: true
    id?: true
    state?: true
    subscriptionId?: true
    externalId?: true
    createdAt?: true
    experimentId?: true
    ambassadorId?: true
    _all?: true
  }

  export type ContributionAggregateArgs = {
    /**
     * Filter which Contribution to aggregate.
    **/
    where?: ContributionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Contributions to fetch.
    **/
    orderBy?: Enumerable<ContributionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contributions
    **/
    count?: true | ContributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ContributionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ContributionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ContributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ContributionMaxAggregateInputType
  }

  export type GetContributionAggregateType<T extends ContributionAggregateArgs> = {
    [P in keyof T & keyof AggregateContribution]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContribution[P]>
      : GetScalarType<T[P], AggregateContribution[P]>
  }



  export type ContributionSelect = {
    amountInCents?: boolean
    email?: boolean
    id?: boolean
    state?: boolean
    subscriptionId?: boolean
    externalId?: boolean
    createdAt?: boolean
    experimentId?: boolean
    ambassadorId?: boolean
    referencedBy?: boolean | AmbassadorArgs
    subscription?: boolean | ContributionSubscriptionArgs
    users?: boolean | UserFindManyArgs
  }

  export type ContributionInclude = {
    referencedBy?: boolean | AmbassadorArgs
    subscription?: boolean | ContributionSubscriptionArgs
    users?: boolean | UserFindManyArgs
  }

  export type ContributionGetPayload<
    S extends boolean | null | undefined | ContributionArgs,
    U = keyof S
      > = S extends true
        ? Contribution
    : S extends undefined
    ? never
    : S extends ContributionArgs | ContributionFindManyArgs
    ?'include' extends U
    ? Contribution  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['include'][P]> | null :
        P extends 'subscription'
        ? ContributionSubscriptionGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Contribution ?Contribution [P]
  : 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['select'][P]> | null :
        P extends 'subscription'
        ? ContributionSubscriptionGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : Contribution
  : Contribution


  type ContributionCountArgs = Merge<
    Omit<ContributionFindManyArgs, 'select' | 'include'> & {
      select?: ContributionCountAggregateInputType | true
    }
  >

  export interface ContributionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Contribution that matches the filter.
     * @param {ContributionFindUniqueArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContributionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContributionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contribution'> extends True ? CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>> : CheckSelect<T, Prisma__ContributionClient<Contribution | null >, Prisma__ContributionClient<ContributionGetPayload<T> | null >>

    /**
     * Find the first Contribution that matches the filter.
     * @param {ContributionFindFirstArgs} args - Arguments to find a Contribution
     * @example
     * // Get one Contribution
     * const contribution = await prisma.contribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContributionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContributionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contribution'> extends True ? CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>> : CheckSelect<T, Prisma__ContributionClient<Contribution | null >, Prisma__ContributionClient<ContributionGetPayload<T> | null >>

    /**
     * Find zero or more Contributions that matches the filter.
     * @param {ContributionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contributions
     * const contributions = await prisma.contribution.findMany()
     * 
     * // Get first 10 Contributions
     * const contributions = await prisma.contribution.findMany({ take: 10 })
     * 
     * // Only select the `amountInCents`
     * const contributionWithAmountInCentsOnly = await prisma.contribution.findMany({ select: { amountInCents: true } })
     * 
    **/
    findMany<T extends ContributionFindManyArgs>(
      args?: SelectSubset<T, ContributionFindManyArgs>
    ): CheckSelect<T, Promise<Array<Contribution>>, Promise<Array<ContributionGetPayload<T>>>>

    /**
     * Create a Contribution.
     * @param {ContributionCreateArgs} args - Arguments to create a Contribution.
     * @example
     * // Create one Contribution
     * const Contribution = await prisma.contribution.create({
     *   data: {
     *     // ... data to create a Contribution
     *   }
     * })
     * 
    **/
    create<T extends ContributionCreateArgs>(
      args: SelectSubset<T, ContributionCreateArgs>
    ): CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>>

    /**
     * Delete a Contribution.
     * @param {ContributionDeleteArgs} args - Arguments to delete one Contribution.
     * @example
     * // Delete one Contribution
     * const Contribution = await prisma.contribution.delete({
     *   where: {
     *     // ... filter to delete one Contribution
     *   }
     * })
     * 
    **/
    delete<T extends ContributionDeleteArgs>(
      args: SelectSubset<T, ContributionDeleteArgs>
    ): CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>>

    /**
     * Update one Contribution.
     * @param {ContributionUpdateArgs} args - Arguments to update one Contribution.
     * @example
     * // Update one Contribution
     * const contribution = await prisma.contribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributionUpdateArgs>(
      args: SelectSubset<T, ContributionUpdateArgs>
    ): CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>>

    /**
     * Delete zero or more Contributions.
     * @param {ContributionDeleteManyArgs} args - Arguments to filter Contributions to delete.
     * @example
     * // Delete a few Contributions
     * const { count } = await prisma.contribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributionDeleteManyArgs>(
      args?: SelectSubset<T, ContributionDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Contributions.
     * @param {ContributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contributions
     * const contribution = await prisma.contribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributionUpdateManyArgs>(
      args: SelectSubset<T, ContributionUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Contribution.
     * @param {ContributionUpsertArgs} args - Arguments to update or create a Contribution.
     * @example
     * // Update or create a Contribution
     * const contribution = await prisma.contribution.upsert({
     *   create: {
     *     // ... data to create a Contribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contribution we want to update
     *   }
     * })
    **/
    upsert<T extends ContributionUpsertArgs>(
      args: SelectSubset<T, ContributionUpsertArgs>
    ): CheckSelect<T, Prisma__ContributionClient<Contribution>, Prisma__ContributionClient<ContributionGetPayload<T>>>

    /**
     * Count the number of Contributions.
     * @param {ContributionCountArgs} args - Arguments to filter Contributions to count.
     * @example
     * // Count the number of Contributions
     * const count = await prisma.contribution.count({
     *   where: {
     *     // ... the filter for the Contributions we want to count
     *   }
     * })
    **/
    count<T extends ContributionCountArgs>(
      args?: Subset<T, ContributionCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contribution.
     * @param {ContributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionAggregateArgs>(args: Subset<T, ContributionAggregateArgs>): Promise<GetContributionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Contribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    referencedBy<T extends AmbassadorArgs = {}>(args?: Subset<T, AmbassadorArgs>): CheckSelect<T, Prisma__AmbassadorClient<Ambassador | null >, Prisma__AmbassadorClient<AmbassadorGetPayload<T> | null >>;

    subscription<T extends ContributionSubscriptionArgs = {}>(args?: Subset<T, ContributionSubscriptionArgs>): CheckSelect<T, Prisma__ContributionSubscriptionClient<ContributionSubscription | null >, Prisma__ContributionSubscriptionClient<ContributionSubscriptionGetPayload<T> | null >>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contribution findUnique
   */
  export type ContributionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * Throw an Error if a Contribution can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contribution to fetch.
    **/
    where: ContributionWhereUniqueInput
  }


  /**
   * Contribution findFirst
   */
  export type ContributionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * Throw an Error if a Contribution can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contribution to fetch.
    **/
    where?: ContributionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Contributions to fetch.
    **/
    orderBy?: Enumerable<ContributionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contributions.
    **/
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Contributions.
    **/
    distinct?: Enumerable<ContributionScalarFieldEnum>
  }


  /**
   * Contribution findMany
   */
  export type ContributionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * Filter, which Contributions to fetch.
    **/
    where?: ContributionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Contributions to fetch.
    **/
    orderBy?: Enumerable<ContributionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contributions.
    **/
    cursor?: ContributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contributions from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contributions.
    **/
    skip?: number
    distinct?: Enumerable<ContributionScalarFieldEnum>
  }


  /**
   * Contribution create
   */
  export type ContributionCreateArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * The data needed to create a Contribution.
    **/
    data: XOR<ContributionUncheckedCreateInput, ContributionCreateInput>
  }


  /**
   * Contribution update
   */
  export type ContributionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * The data needed to update a Contribution.
    **/
    data: XOR<ContributionUncheckedUpdateInput, ContributionUpdateInput>
    /**
     * Choose, which Contribution to update.
    **/
    where: ContributionWhereUniqueInput
  }


  /**
   * Contribution updateMany
   */
  export type ContributionUpdateManyArgs = {
    data: XOR<ContributionUncheckedUpdateManyInput, ContributionUpdateManyMutationInput>
    where?: ContributionWhereInput
  }


  /**
   * Contribution upsert
   */
  export type ContributionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * The filter to search for the Contribution to update in case it exists.
    **/
    where: ContributionWhereUniqueInput
    /**
     * In case the Contribution found by the `where` argument doesn't exist, create a new Contribution with this data.
    **/
    create: XOR<ContributionUncheckedCreateInput, ContributionCreateInput>
    /**
     * In case the Contribution was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ContributionUncheckedUpdateInput, ContributionUpdateInput>
  }


  /**
   * Contribution delete
   */
  export type ContributionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
    /**
     * Filter which Contribution to delete.
    **/
    where: ContributionWhereUniqueInput
  }


  /**
   * Contribution deleteMany
   */
  export type ContributionDeleteManyArgs = {
    where?: ContributionWhereInput
  }


  /**
   * Contribution without action
   */
  export type ContributionArgs = {
    /**
     * Select specific fields to fetch from the Contribution
    **/
    select?: ContributionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    admissionYear: number
    id: number
    ambassadorId: number | null
  }

  export type UserSumAggregateOutputType = {
    admissionYear: number
    id: number
    ambassadorId: number | null
  }

  export type UserMinAggregateOutputType = {
    admissionYear: number
    createdAt: Date | null
    degree: string | null
    email: string | null
    firstName: string | null
    id: number
    lastName: string | null
    mentorshipInterest: boolean | null
    tutorshipInterest: boolean | null
    university: string | null
    volunteeringInterest: boolean | null
    ambassadorId: number | null
  }

  export type UserMaxAggregateOutputType = {
    admissionYear: number
    createdAt: Date | null
    degree: string | null
    email: string | null
    firstName: string | null
    id: number
    lastName: string | null
    mentorshipInterest: boolean | null
    tutorshipInterest: boolean | null
    university: string | null
    volunteeringInterest: boolean | null
    ambassadorId: number | null
  }

  export type UserCountAggregateOutputType = {
    admissionYear: number
    createdAt: number | null
    degree: number | null
    email: number | null
    firstName: number | null
    id: number
    lastName: number | null
    mentorshipInterest: number | null
    tutorshipInterest: number | null
    university: number | null
    volunteeringInterest: number | null
    ambassadorId: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    admissionYear?: true
    id?: true
    ambassadorId?: true
  }

  export type UserSumAggregateInputType = {
    admissionYear?: true
    id?: true
    ambassadorId?: true
  }

  export type UserMinAggregateInputType = {
    admissionYear?: true
    createdAt?: true
    degree?: true
    email?: true
    firstName?: true
    id?: true
    lastName?: true
    mentorshipInterest?: true
    tutorshipInterest?: true
    university?: true
    volunteeringInterest?: true
    ambassadorId?: true
  }

  export type UserMaxAggregateInputType = {
    admissionYear?: true
    createdAt?: true
    degree?: true
    email?: true
    firstName?: true
    id?: true
    lastName?: true
    mentorshipInterest?: true
    tutorshipInterest?: true
    university?: true
    volunteeringInterest?: true
    ambassadorId?: true
  }

  export type UserCountAggregateInputType = {
    admissionYear?: true
    createdAt?: true
    degree?: true
    email?: true
    firstName?: true
    id?: true
    lastName?: true
    mentorshipInterest?: true
    tutorshipInterest?: true
    university?: true
    volunteeringInterest?: true
    ambassadorId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    admissionYear?: boolean
    createdAt?: boolean
    degree?: boolean
    email?: boolean
    firstName?: boolean
    id?: boolean
    lastName?: boolean
    mentorshipInterest?: boolean
    tutorshipInterest?: boolean
    university?: boolean
    volunteeringInterest?: boolean
    ambassadorId?: boolean
    referencedBy?: boolean | AmbassadorArgs
    contribution_subscriptions?: boolean | ContributionSubscriptionFindManyArgs
    contributions?: boolean | ContributionFindManyArgs
  }

  export type UserInclude = {
    referencedBy?: boolean | AmbassadorArgs
    contribution_subscriptions?: boolean | ContributionSubscriptionFindManyArgs
    contributions?: boolean | ContributionFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['include'][P]> | null :
        P extends 'contribution_subscriptions'
        ? Array < ContributionSubscriptionGetPayload<S['include'][P]>>  :
        P extends 'contributions'
        ? Array < ContributionGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'referencedBy'
        ? AmbassadorGetPayload<S['select'][P]> | null :
        P extends 'contribution_subscriptions'
        ? Array < ContributionSubscriptionGetPayload<S['select'][P]>>  :
        P extends 'contributions'
        ? Array < ContributionGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `admissionYear`
     * const userWithAdmissionYearOnly = await prisma.user.findMany({ select: { admissionYear: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    referencedBy<T extends AmbassadorArgs = {}>(args?: Subset<T, AmbassadorArgs>): CheckSelect<T, Prisma__AmbassadorClient<Ambassador | null >, Prisma__AmbassadorClient<AmbassadorGetPayload<T> | null >>;

    contribution_subscriptions<T extends ContributionSubscriptionFindManyArgs = {}>(args?: Subset<T, ContributionSubscriptionFindManyArgs>): CheckSelect<T, Promise<Array<ContributionSubscription>>, Promise<Array<ContributionSubscriptionGetPayload<T>>>>;

    contributions<T extends ContributionFindManyArgs = {}>(args?: Subset<T, ContributionFindManyArgs>): CheckSelect<T, Promise<Array<Contribution>>, Promise<Array<ContributionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Ambassador
   */


  export type AggregateAmbassador = {
    count: AmbassadorCountAggregateOutputType | null
    avg: AmbassadorAvgAggregateOutputType | null
    sum: AmbassadorSumAggregateOutputType | null
    min: AmbassadorMinAggregateOutputType | null
    max: AmbassadorMaxAggregateOutputType | null
  }

  export type AmbassadorAvgAggregateOutputType = {
    id: number
  }

  export type AmbassadorSumAggregateOutputType = {
    id: number
  }

  export type AmbassadorMinAggregateOutputType = {
    id: number
    isActive: boolean | null
    createAT: Date | null
  }

  export type AmbassadorMaxAggregateOutputType = {
    id: number
    isActive: boolean | null
    createAT: Date | null
  }

  export type AmbassadorCountAggregateOutputType = {
    id: number
    isActive: number | null
    createAT: number | null
    _all: number
  }


  export type AmbassadorAvgAggregateInputType = {
    id?: true
  }

  export type AmbassadorSumAggregateInputType = {
    id?: true
  }

  export type AmbassadorMinAggregateInputType = {
    id?: true
    isActive?: true
    createAT?: true
  }

  export type AmbassadorMaxAggregateInputType = {
    id?: true
    isActive?: true
    createAT?: true
  }

  export type AmbassadorCountAggregateInputType = {
    id?: true
    isActive?: true
    createAT?: true
    _all?: true
  }

  export type AmbassadorAggregateArgs = {
    /**
     * Filter which Ambassador to aggregate.
    **/
    where?: AmbassadorWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Ambassadors to fetch.
    **/
    orderBy?: Enumerable<AmbassadorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: AmbassadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambassadors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambassadors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ambassadors
    **/
    count?: true | AmbassadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: AmbassadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: AmbassadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: AmbassadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: AmbassadorMaxAggregateInputType
  }

  export type GetAmbassadorAggregateType<T extends AmbassadorAggregateArgs> = {
    [P in keyof T & keyof AggregateAmbassador]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbassador[P]>
      : GetScalarType<T[P], AggregateAmbassador[P]>
  }



  export type AmbassadorSelect = {
    id?: boolean
    isActive?: boolean
    createAT?: boolean
    ContributionSubscription?: boolean | ContributionSubscriptionFindManyArgs
    Contribution?: boolean | ContributionFindManyArgs
    user?: boolean | UserArgs
  }

  export type AmbassadorInclude = {
    ContributionSubscription?: boolean | ContributionSubscriptionFindManyArgs
    Contribution?: boolean | ContributionFindManyArgs
    user?: boolean | UserArgs
  }

  export type AmbassadorGetPayload<
    S extends boolean | null | undefined | AmbassadorArgs,
    U = keyof S
      > = S extends true
        ? Ambassador
    : S extends undefined
    ? never
    : S extends AmbassadorArgs | AmbassadorFindManyArgs
    ?'include' extends U
    ? Ambassador  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'ContributionSubscription'
        ? Array < ContributionSubscriptionGetPayload<S['include'][P]>>  :
        P extends 'Contribution'
        ? Array < ContributionGetPayload<S['include'][P]>>  :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Ambassador ?Ambassador [P]
  : 
          P extends 'ContributionSubscription'
        ? Array < ContributionSubscriptionGetPayload<S['select'][P]>>  :
        P extends 'Contribution'
        ? Array < ContributionGetPayload<S['select'][P]>>  :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Ambassador
  : Ambassador


  type AmbassadorCountArgs = Merge<
    Omit<AmbassadorFindManyArgs, 'select' | 'include'> & {
      select?: AmbassadorCountAggregateInputType | true
    }
  >

  export interface AmbassadorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Ambassador that matches the filter.
     * @param {AmbassadorFindUniqueArgs} args - Arguments to find a Ambassador
     * @example
     * // Get one Ambassador
     * const ambassador = await prisma.ambassador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AmbassadorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AmbassadorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ambassador'> extends True ? CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>> : CheckSelect<T, Prisma__AmbassadorClient<Ambassador | null >, Prisma__AmbassadorClient<AmbassadorGetPayload<T> | null >>

    /**
     * Find the first Ambassador that matches the filter.
     * @param {AmbassadorFindFirstArgs} args - Arguments to find a Ambassador
     * @example
     * // Get one Ambassador
     * const ambassador = await prisma.ambassador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AmbassadorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AmbassadorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ambassador'> extends True ? CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>> : CheckSelect<T, Prisma__AmbassadorClient<Ambassador | null >, Prisma__AmbassadorClient<AmbassadorGetPayload<T> | null >>

    /**
     * Find zero or more Ambassadors that matches the filter.
     * @param {AmbassadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ambassadors
     * const ambassadors = await prisma.ambassador.findMany()
     * 
     * // Get first 10 Ambassadors
     * const ambassadors = await prisma.ambassador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ambassadorWithIdOnly = await prisma.ambassador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AmbassadorFindManyArgs>(
      args?: SelectSubset<T, AmbassadorFindManyArgs>
    ): CheckSelect<T, Promise<Array<Ambassador>>, Promise<Array<AmbassadorGetPayload<T>>>>

    /**
     * Create a Ambassador.
     * @param {AmbassadorCreateArgs} args - Arguments to create a Ambassador.
     * @example
     * // Create one Ambassador
     * const Ambassador = await prisma.ambassador.create({
     *   data: {
     *     // ... data to create a Ambassador
     *   }
     * })
     * 
    **/
    create<T extends AmbassadorCreateArgs>(
      args: SelectSubset<T, AmbassadorCreateArgs>
    ): CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>>

    /**
     * Delete a Ambassador.
     * @param {AmbassadorDeleteArgs} args - Arguments to delete one Ambassador.
     * @example
     * // Delete one Ambassador
     * const Ambassador = await prisma.ambassador.delete({
     *   where: {
     *     // ... filter to delete one Ambassador
     *   }
     * })
     * 
    **/
    delete<T extends AmbassadorDeleteArgs>(
      args: SelectSubset<T, AmbassadorDeleteArgs>
    ): CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>>

    /**
     * Update one Ambassador.
     * @param {AmbassadorUpdateArgs} args - Arguments to update one Ambassador.
     * @example
     * // Update one Ambassador
     * const ambassador = await prisma.ambassador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AmbassadorUpdateArgs>(
      args: SelectSubset<T, AmbassadorUpdateArgs>
    ): CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>>

    /**
     * Delete zero or more Ambassadors.
     * @param {AmbassadorDeleteManyArgs} args - Arguments to filter Ambassadors to delete.
     * @example
     * // Delete a few Ambassadors
     * const { count } = await prisma.ambassador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AmbassadorDeleteManyArgs>(
      args?: SelectSubset<T, AmbassadorDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Ambassadors.
     * @param {AmbassadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ambassadors
     * const ambassador = await prisma.ambassador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AmbassadorUpdateManyArgs>(
      args: SelectSubset<T, AmbassadorUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Ambassador.
     * @param {AmbassadorUpsertArgs} args - Arguments to update or create a Ambassador.
     * @example
     * // Update or create a Ambassador
     * const ambassador = await prisma.ambassador.upsert({
     *   create: {
     *     // ... data to create a Ambassador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ambassador we want to update
     *   }
     * })
    **/
    upsert<T extends AmbassadorUpsertArgs>(
      args: SelectSubset<T, AmbassadorUpsertArgs>
    ): CheckSelect<T, Prisma__AmbassadorClient<Ambassador>, Prisma__AmbassadorClient<AmbassadorGetPayload<T>>>

    /**
     * Count the number of Ambassadors.
     * @param {AmbassadorCountArgs} args - Arguments to filter Ambassadors to count.
     * @example
     * // Count the number of Ambassadors
     * const count = await prisma.ambassador.count({
     *   where: {
     *     // ... the filter for the Ambassadors we want to count
     *   }
     * })
    **/
    count<T extends AmbassadorCountArgs>(
      args?: Subset<T, AmbassadorCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbassadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ambassador.
     * @param {AmbassadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbassadorAggregateArgs>(args: Subset<T, AmbassadorAggregateArgs>): Promise<GetAmbassadorAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Ambassador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AmbassadorClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ContributionSubscription<T extends ContributionSubscriptionFindManyArgs = {}>(args?: Subset<T, ContributionSubscriptionFindManyArgs>): CheckSelect<T, Promise<Array<ContributionSubscription>>, Promise<Array<ContributionSubscriptionGetPayload<T>>>>;

    Contribution<T extends ContributionFindManyArgs = {}>(args?: Subset<T, ContributionFindManyArgs>): CheckSelect<T, Promise<Array<Contribution>>, Promise<Array<ContributionGetPayload<T>>>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Ambassador findUnique
   */
  export type AmbassadorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * Throw an Error if a Ambassador can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ambassador to fetch.
    **/
    where: AmbassadorWhereUniqueInput
  }


  /**
   * Ambassador findFirst
   */
  export type AmbassadorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * Throw an Error if a Ambassador can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ambassador to fetch.
    **/
    where?: AmbassadorWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Ambassadors to fetch.
    **/
    orderBy?: Enumerable<AmbassadorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ambassadors.
    **/
    cursor?: AmbassadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambassadors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambassadors.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Ambassadors.
    **/
    distinct?: Enumerable<AmbassadorScalarFieldEnum>
  }


  /**
   * Ambassador findMany
   */
  export type AmbassadorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * Filter, which Ambassadors to fetch.
    **/
    where?: AmbassadorWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Ambassadors to fetch.
    **/
    orderBy?: Enumerable<AmbassadorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ambassadors.
    **/
    cursor?: AmbassadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambassadors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambassadors.
    **/
    skip?: number
    distinct?: Enumerable<AmbassadorScalarFieldEnum>
  }


  /**
   * Ambassador create
   */
  export type AmbassadorCreateArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * The data needed to create a Ambassador.
    **/
    data: XOR<AmbassadorUncheckedCreateInput, AmbassadorCreateInput>
  }


  /**
   * Ambassador update
   */
  export type AmbassadorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * The data needed to update a Ambassador.
    **/
    data: XOR<AmbassadorUncheckedUpdateInput, AmbassadorUpdateInput>
    /**
     * Choose, which Ambassador to update.
    **/
    where: AmbassadorWhereUniqueInput
  }


  /**
   * Ambassador updateMany
   */
  export type AmbassadorUpdateManyArgs = {
    data: XOR<AmbassadorUncheckedUpdateManyInput, AmbassadorUpdateManyMutationInput>
    where?: AmbassadorWhereInput
  }


  /**
   * Ambassador upsert
   */
  export type AmbassadorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * The filter to search for the Ambassador to update in case it exists.
    **/
    where: AmbassadorWhereUniqueInput
    /**
     * In case the Ambassador found by the `where` argument doesn't exist, create a new Ambassador with this data.
    **/
    create: XOR<AmbassadorUncheckedCreateInput, AmbassadorCreateInput>
    /**
     * In case the Ambassador was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<AmbassadorUncheckedUpdateInput, AmbassadorUpdateInput>
  }


  /**
   * Ambassador delete
   */
  export type AmbassadorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
    /**
     * Filter which Ambassador to delete.
    **/
    where: AmbassadorWhereUniqueInput
  }


  /**
   * Ambassador deleteMany
   */
  export type AmbassadorDeleteManyArgs = {
    where?: AmbassadorWhereInput
  }


  /**
   * Ambassador without action
   */
  export type AmbassadorArgs = {
    /**
     * Select specific fields to fetch from the Ambassador
    **/
    select?: AmbassadorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AmbassadorInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ContributionSubscriptionScalarFieldEnum: {
    amountInCents: 'amountInCents',
    email: 'email',
    id: 'id',
    state: 'state',
    externalId: 'externalId',
    experimentId: 'experimentId',
    ambassadorId: 'ambassadorId'
  };

  export type ContributionSubscriptionScalarFieldEnum = (typeof ContributionSubscriptionScalarFieldEnum)[keyof typeof ContributionSubscriptionScalarFieldEnum]


  export const ContributionScalarFieldEnum: {
    amountInCents: 'amountInCents',
    email: 'email',
    id: 'id',
    state: 'state',
    subscriptionId: 'subscriptionId',
    externalId: 'externalId',
    createdAt: 'createdAt',
    experimentId: 'experimentId',
    ambassadorId: 'ambassadorId'
  };

  export type ContributionScalarFieldEnum = (typeof ContributionScalarFieldEnum)[keyof typeof ContributionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    admissionYear: 'admissionYear',
    createdAt: 'createdAt',
    degree: 'degree',
    email: 'email',
    firstName: 'firstName',
    id: 'id',
    lastName: 'lastName',
    mentorshipInterest: 'mentorshipInterest',
    tutorshipInterest: 'tutorshipInterest',
    university: 'university',
    volunteeringInterest: 'volunteeringInterest',
    ambassadorId: 'ambassadorId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AmbassadorScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    createAT: 'createAT'
  };

  export type AmbassadorScalarFieldEnum = (typeof AmbassadorScalarFieldEnum)[keyof typeof AmbassadorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ContributionSubscriptionWhereInput = {
    AND?: Enumerable<ContributionSubscriptionWhereInput>
    OR?: Enumerable<ContributionSubscriptionWhereInput>
    NOT?: Enumerable<ContributionSubscriptionWhereInput>
    amountInCents?: IntFilter | number
    email?: StringFilter | string
    id?: IntFilter | number
    state?: EnumSubscriptionStateFilter | SubscriptionState
    externalId?: StringNullableFilter | string | null
    experimentId?: StringNullableFilter | string | null
    ambassadorId?: IntNullableFilter | number | null
    referencedBy?: XOR<AmbassadorWhereInput, AmbassadorRelationFilter> | null
    contributions?: ContributionListRelationFilter
    users?: UserListRelationFilter
  }

  export type ContributionSubscriptionOrderByInput = {
    amountInCents?: SortOrder
    email?: SortOrder
    id?: SortOrder
    state?: SortOrder
    externalId?: SortOrder
    experimentId?: SortOrder
    ambassadorId?: SortOrder
    referencedBy?: AmbassadorOrderByInput
  }

  export type ContributionSubscriptionWhereUniqueInput = {
    id?: number
  }

  export type ContributionWhereInput = {
    AND?: Enumerable<ContributionWhereInput>
    OR?: Enumerable<ContributionWhereInput>
    NOT?: Enumerable<ContributionWhereInput>
    amountInCents?: IntFilter | number
    email?: StringFilter | string
    id?: IntFilter | number
    state?: EnumContributionStateFilter | ContributionState
    subscriptionId?: IntNullableFilter | number | null
    externalId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    experimentId?: StringNullableFilter | string | null
    ambassadorId?: IntNullableFilter | number | null
    referencedBy?: XOR<AmbassadorWhereInput, AmbassadorRelationFilter> | null
    subscription?: XOR<ContributionSubscriptionWhereInput, ContributionSubscriptionRelationFilter> | null
    users?: UserListRelationFilter
  }

  export type ContributionOrderByInput = {
    amountInCents?: SortOrder
    email?: SortOrder
    id?: SortOrder
    state?: SortOrder
    subscriptionId?: SortOrder
    externalId?: SortOrder
    createdAt?: SortOrder
    experimentId?: SortOrder
    ambassadorId?: SortOrder
    referencedBy?: AmbassadorOrderByInput
    subscription?: ContributionSubscriptionOrderByInput
  }

  export type ContributionWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    admissionYear?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    degree?: StringFilter | string
    email?: StringFilter | string
    firstName?: StringFilter | string
    id?: IntFilter | number
    lastName?: StringFilter | string
    mentorshipInterest?: BoolFilter | boolean
    tutorshipInterest?: BoolFilter | boolean
    university?: StringFilter | string
    volunteeringInterest?: BoolFilter | boolean
    ambassadorId?: IntNullableFilter | number | null
    referencedBy?: XOR<AmbassadorWhereInput, AmbassadorRelationFilter> | null
    contribution_subscriptions?: ContributionSubscriptionListRelationFilter
    contributions?: ContributionListRelationFilter
  }

  export type UserOrderByInput = {
    admissionYear?: SortOrder
    createdAt?: SortOrder
    degree?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    id?: SortOrder
    lastName?: SortOrder
    mentorshipInterest?: SortOrder
    tutorshipInterest?: SortOrder
    university?: SortOrder
    volunteeringInterest?: SortOrder
    ambassadorId?: SortOrder
  }

  export type UserWhereUniqueInput = {
    email?: string
    id?: number
    ambassadorId?: number
  }

  export type AmbassadorWhereInput = {
    AND?: Enumerable<AmbassadorWhereInput>
    OR?: Enumerable<AmbassadorWhereInput>
    NOT?: Enumerable<AmbassadorWhereInput>
    id?: IntFilter | number
    isActive?: BoolFilter | boolean
    createAT?: DateTimeFilter | Date | string
    ContributionSubscription?: ContributionSubscriptionListRelationFilter
    Contribution?: ContributionListRelationFilter
    user?: XOR<UserWhereInput, UserRelationFilter> | null
  }

  export type AmbassadorOrderByInput = {
    id?: SortOrder
    isActive?: SortOrder
    createAT?: SortOrder
    user?: UserOrderByInput
  }

  export type AmbassadorWhereUniqueInput = {
    id?: number
  }

  export type ContributionSubscriptionCreateInput = {
    amountInCents: number
    email: string
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionSubscriptionInput | number
    contributions?: ContributionCreateNestedManyWithoutSubscriptionInput
    users?: UserCreateNestedManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedCreateInput = {
    amountInCents: number
    email: string
    id?: number
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    ambassadorId?: number | null
    contributions?: ContributionUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUpdateInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionSubscriptionInput
    contributions?: ContributionUpdateManyWithoutSubscriptionInput
    users?: UserUpdateManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedUpdateInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: ContributionUncheckedUpdateManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUpdateManyMutationInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContributionSubscriptionUncheckedUpdateManyInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionCreateInput = {
    amountInCents: number
    email: string
    state: ContributionState
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionInput | number
    subscription?: ContributionSubscriptionCreateNestedOneWithoutContributionsInput
    users?: UserCreateNestedManyWithoutContributionsInput
  }

  export type ContributionUncheckedCreateInput = {
    amountInCents: number
    email: string
    id?: number
    state: ContributionState
    subscriptionId?: number | null
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    ambassadorId?: number | null
  }

  export type ContributionUpdateInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionInput
    subscription?: ContributionSubscriptionUpdateOneWithoutContributionsInput
    users?: UserUpdateManyWithoutContributionsInput
  }

  export type ContributionUncheckedUpdateInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    subscriptionId?: NullableIntFieldUpdateOperationsInput | number | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionUpdateManyMutationInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContributionUncheckedUpdateManyInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    subscriptionId?: NullableIntFieldUpdateOperationsInput | number | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    referencedBy?: AmbassadorCreateNestedOneWithoutUserInput
    contribution_subscriptions?: ContributionSubscriptionCreateNestedManyWithoutUsersInput
    contributions?: ContributionCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    id?: number
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    ambassadorId?: number | null
  }

  export type UserUpdateInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    referencedBy?: AmbassadorUpdateOneWithoutUserInput
    contribution_subscriptions?: ContributionSubscriptionUpdateManyWithoutUsersInput
    contributions?: ContributionUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateManyMutationInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AmbassadorCreateInput = {
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionCreateNestedManyWithoutReferencedByInput
    Contribution?: ContributionCreateNestedManyWithoutReferencedByInput
    user?: UserCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedCreateInput = {
    id?: number
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedCreateNestedManyWithoutReferencedByInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutReferencedByInput
    user?: UserUncheckedCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorUpdateInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUpdateManyWithoutReferencedByInput
    Contribution?: ContributionUpdateManyWithoutReferencedByInput
    user?: UserUpdateOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedUpdateManyWithoutReferencedByInput
    Contribution?: ContributionUncheckedUpdateManyWithoutReferencedByInput
    user?: UserUncheckedUpdateOneWithoutReferencedByInput
  }

  export type AmbassadorUpdateManyMutationInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbassadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumSubscriptionStateFilter = {
    equals?: SubscriptionState
    in?: Enumerable<SubscriptionState>
    notIn?: Enumerable<SubscriptionState>
    not?: NestedEnumSubscriptionStateFilter | SubscriptionState
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AmbassadorRelationFilter = {
    is?: AmbassadorWhereInput | null
    isNot?: AmbassadorWhereInput | null
  }

  export type ContributionListRelationFilter = {
    every?: ContributionWhereInput
    some?: ContributionWhereInput
    none?: ContributionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type EnumContributionStateFilter = {
    equals?: ContributionState
    in?: Enumerable<ContributionState>
    notIn?: Enumerable<ContributionState>
    not?: NestedEnumContributionStateFilter | ContributionState
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ContributionSubscriptionRelationFilter = {
    is?: ContributionSubscriptionWhereInput | null
    isNot?: ContributionSubscriptionWhereInput | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ContributionSubscriptionListRelationFilter = {
    every?: ContributionSubscriptionWhereInput
    some?: ContributionSubscriptionWhereInput
    none?: ContributionSubscriptionWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AmbassadorCreateNestedOneWithoutContributionSubscriptionInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutContributionSubscriptionInput, AmbassadorCreateWithoutContributionSubscriptionInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutContributionSubscriptionInput
    connect?: AmbassadorWhereUniqueInput
  }

  export type ContributionCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutSubscriptionInput>, Enumerable<ContributionCreateWithoutSubscriptionInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutsubscriptionInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutContribution_subscriptionsInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutContribution_subscriptionsInput>, Enumerable<UserCreateWithoutContribution_subscriptionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutcontribution_subscriptionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ContributionUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutSubscriptionInput>, Enumerable<ContributionCreateWithoutSubscriptionInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutsubscriptionInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumSubscriptionStateFieldUpdateOperationsInput = {
    set?: SubscriptionState
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AmbassadorUpdateOneWithoutContributionSubscriptionInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutContributionSubscriptionInput, AmbassadorCreateWithoutContributionSubscriptionInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutContributionSubscriptionInput
    upsert?: AmbassadorUpsertWithoutContributionSubscriptionInput
    connect?: AmbassadorWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<AmbassadorUncheckedUpdateWithoutContributionSubscriptionInput, AmbassadorUpdateWithoutContributionSubscriptionInput>
  }

  export type ContributionUpdateManyWithoutSubscriptionInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutSubscriptionInput>, Enumerable<ContributionCreateWithoutSubscriptionInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutsubscriptionInput>
    upsert?: Enumerable<ContributionUpsertWithWhereUniqueWithoutSubscriptionInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
    set?: Enumerable<ContributionWhereUniqueInput>
    disconnect?: Enumerable<ContributionWhereUniqueInput>
    delete?: Enumerable<ContributionWhereUniqueInput>
    update?: Enumerable<ContributionUpdateWithWhereUniqueWithoutSubscriptionInput>
    updateMany?: Enumerable<ContributionUpdateManyWithWhereWithoutSubscriptionInput>
    deleteMany?: Enumerable<ContributionScalarWhereInput>
  }

  export type UserUpdateManyWithoutContribution_subscriptionsInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutContribution_subscriptionsInput>, Enumerable<UserCreateWithoutContribution_subscriptionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutcontribution_subscriptionsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutContribution_subscriptionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutContribution_subscriptionsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutContribution_subscriptionsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContributionUncheckedUpdateManyWithoutSubscriptionInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutSubscriptionInput>, Enumerable<ContributionCreateWithoutSubscriptionInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutsubscriptionInput>
    upsert?: Enumerable<ContributionUpsertWithWhereUniqueWithoutSubscriptionInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
    set?: Enumerable<ContributionWhereUniqueInput>
    disconnect?: Enumerable<ContributionWhereUniqueInput>
    delete?: Enumerable<ContributionWhereUniqueInput>
    update?: Enumerable<ContributionUpdateWithWhereUniqueWithoutSubscriptionInput>
    updateMany?: Enumerable<ContributionUpdateManyWithWhereWithoutSubscriptionInput>
    deleteMany?: Enumerable<ContributionScalarWhereInput>
  }

  export type AmbassadorCreateNestedOneWithoutContributionInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutContributionInput, AmbassadorCreateWithoutContributionInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutContributionInput
    connect?: AmbassadorWhereUniqueInput
  }

  export type ContributionSubscriptionCreateNestedOneWithoutContributionsInput = {
    create?: XOR<ContributionSubscriptionUncheckedCreateWithoutContributionsInput, ContributionSubscriptionCreateWithoutContributionsInput>
    connectOrCreate?: ContributionSubscriptionCreateOrConnectWithoutcontributionsInput
    connect?: ContributionSubscriptionWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutContributionsInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutContributionsInput>, Enumerable<UserCreateWithoutContributionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutcontributionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type EnumContributionStateFieldUpdateOperationsInput = {
    set?: ContributionState
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AmbassadorUpdateOneWithoutContributionInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutContributionInput, AmbassadorCreateWithoutContributionInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutContributionInput
    upsert?: AmbassadorUpsertWithoutContributionInput
    connect?: AmbassadorWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<AmbassadorUncheckedUpdateWithoutContributionInput, AmbassadorUpdateWithoutContributionInput>
  }

  export type ContributionSubscriptionUpdateOneWithoutContributionsInput = {
    create?: XOR<ContributionSubscriptionUncheckedCreateWithoutContributionsInput, ContributionSubscriptionCreateWithoutContributionsInput>
    connectOrCreate?: ContributionSubscriptionCreateOrConnectWithoutcontributionsInput
    upsert?: ContributionSubscriptionUpsertWithoutContributionsInput
    connect?: ContributionSubscriptionWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ContributionSubscriptionUncheckedUpdateWithoutContributionsInput, ContributionSubscriptionUpdateWithoutContributionsInput>
  }

  export type UserUpdateManyWithoutContributionsInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutContributionsInput>, Enumerable<UserCreateWithoutContributionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutcontributionsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutContributionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutContributionsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutContributionsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type AmbassadorCreateNestedOneWithoutUserInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutUserInput, AmbassadorCreateWithoutUserInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutuserInput
    connect?: AmbassadorWhereUniqueInput
  }

  export type ContributionSubscriptionCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutUsersInput>, Enumerable<ContributionSubscriptionCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutusersInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
  }

  export type ContributionCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutUsersInput>, Enumerable<ContributionCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutusersInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AmbassadorUpdateOneWithoutUserInput = {
    create?: XOR<AmbassadorUncheckedCreateWithoutUserInput, AmbassadorCreateWithoutUserInput>
    connectOrCreate?: AmbassadorCreateOrConnectWithoutuserInput
    upsert?: AmbassadorUpsertWithoutUserInput
    connect?: AmbassadorWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<AmbassadorUncheckedUpdateWithoutUserInput, AmbassadorUpdateWithoutUserInput>
  }

  export type ContributionSubscriptionUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutUsersInput>, Enumerable<ContributionSubscriptionCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutusersInput>
    upsert?: Enumerable<ContributionSubscriptionUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    set?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    disconnect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    delete?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    update?: Enumerable<ContributionSubscriptionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ContributionSubscriptionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ContributionSubscriptionScalarWhereInput>
  }

  export type ContributionUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutUsersInput>, Enumerable<ContributionCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutusersInput>
    upsert?: Enumerable<ContributionUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
    set?: Enumerable<ContributionWhereUniqueInput>
    disconnect?: Enumerable<ContributionWhereUniqueInput>
    delete?: Enumerable<ContributionWhereUniqueInput>
    update?: Enumerable<ContributionUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ContributionUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ContributionScalarWhereInput>
  }

  export type ContributionSubscriptionCreateNestedManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionSubscriptionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutreferencedByInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
  }

  export type ContributionCreateNestedManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutreferencedByInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutReferencedByInput = {
    create?: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutreferencedByInput
    connect?: UserWhereUniqueInput
  }

  export type ContributionSubscriptionUncheckedCreateNestedManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionSubscriptionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutreferencedByInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
  }

  export type ContributionUncheckedCreateNestedManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutreferencedByInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedOneWithoutReferencedByInput = {
    create?: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutreferencedByInput
    connect?: UserWhereUniqueInput
  }

  export type ContributionSubscriptionUpdateManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionSubscriptionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutreferencedByInput>
    upsert?: Enumerable<ContributionSubscriptionUpsertWithWhereUniqueWithoutReferencedByInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    set?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    disconnect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    delete?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    update?: Enumerable<ContributionSubscriptionUpdateWithWhereUniqueWithoutReferencedByInput>
    updateMany?: Enumerable<ContributionSubscriptionUpdateManyWithWhereWithoutReferencedByInput>
    deleteMany?: Enumerable<ContributionSubscriptionScalarWhereInput>
  }

  export type ContributionUpdateManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutreferencedByInput>
    upsert?: Enumerable<ContributionUpsertWithWhereUniqueWithoutReferencedByInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
    set?: Enumerable<ContributionWhereUniqueInput>
    disconnect?: Enumerable<ContributionWhereUniqueInput>
    delete?: Enumerable<ContributionWhereUniqueInput>
    update?: Enumerable<ContributionUpdateWithWhereUniqueWithoutReferencedByInput>
    updateMany?: Enumerable<ContributionUpdateManyWithWhereWithoutReferencedByInput>
    deleteMany?: Enumerable<ContributionScalarWhereInput>
  }

  export type UserUpdateOneWithoutReferencedByInput = {
    create?: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutreferencedByInput
    upsert?: UserUpsertWithoutReferencedByInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUncheckedUpdateWithoutReferencedByInput, UserUpdateWithoutReferencedByInput>
  }

  export type ContributionSubscriptionUncheckedUpdateManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionSubscriptionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionSubscriptionCreateOrConnectWithoutreferencedByInput>
    upsert?: Enumerable<ContributionSubscriptionUpsertWithWhereUniqueWithoutReferencedByInput>
    connect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    set?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    disconnect?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    delete?: Enumerable<ContributionSubscriptionWhereUniqueInput>
    update?: Enumerable<ContributionSubscriptionUpdateWithWhereUniqueWithoutReferencedByInput>
    updateMany?: Enumerable<ContributionSubscriptionUpdateManyWithWhereWithoutReferencedByInput>
    deleteMany?: Enumerable<ContributionSubscriptionScalarWhereInput>
  }

  export type ContributionUncheckedUpdateManyWithoutReferencedByInput = {
    create?: XOR<Enumerable<ContributionUncheckedCreateWithoutReferencedByInput>, Enumerable<ContributionCreateWithoutReferencedByInput>>
    connectOrCreate?: Enumerable<ContributionCreateOrConnectWithoutreferencedByInput>
    upsert?: Enumerable<ContributionUpsertWithWhereUniqueWithoutReferencedByInput>
    connect?: Enumerable<ContributionWhereUniqueInput>
    set?: Enumerable<ContributionWhereUniqueInput>
    disconnect?: Enumerable<ContributionWhereUniqueInput>
    delete?: Enumerable<ContributionWhereUniqueInput>
    update?: Enumerable<ContributionUpdateWithWhereUniqueWithoutReferencedByInput>
    updateMany?: Enumerable<ContributionUpdateManyWithWhereWithoutReferencedByInput>
    deleteMany?: Enumerable<ContributionScalarWhereInput>
  }

  export type UserUncheckedUpdateOneWithoutReferencedByInput = {
    create?: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutreferencedByInput
    upsert?: UserUpsertWithoutReferencedByInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUncheckedUpdateWithoutReferencedByInput, UserUpdateWithoutReferencedByInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumSubscriptionStateFilter = {
    equals?: SubscriptionState
    in?: Enumerable<SubscriptionState>
    notIn?: Enumerable<SubscriptionState>
    not?: NestedEnumSubscriptionStateFilter | SubscriptionState
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumContributionStateFilter = {
    equals?: ContributionState
    in?: Enumerable<ContributionState>
    notIn?: Enumerable<ContributionState>
    not?: NestedEnumContributionStateFilter | ContributionState
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type AmbassadorCreateWithoutContributionSubscriptionInput = {
    isActive: boolean
    createAT?: Date | string
    Contribution?: ContributionCreateNestedManyWithoutReferencedByInput
    user?: UserCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedCreateWithoutContributionSubscriptionInput = {
    id?: number
    isActive: boolean
    createAT?: Date | string
    Contribution?: ContributionUncheckedCreateNestedManyWithoutReferencedByInput
    user?: UserUncheckedCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorCreateOrConnectWithoutContributionSubscriptionInput = {
    where: AmbassadorWhereUniqueInput
    create: XOR<AmbassadorUncheckedCreateWithoutContributionSubscriptionInput, AmbassadorCreateWithoutContributionSubscriptionInput>
  }

  export type ContributionCreateWithoutSubscriptionInput = {
    amountInCents: number
    email: string
    state: ContributionState
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionInput
    users?: UserCreateNestedManyWithoutContributionsInput
  }

  export type ContributionUncheckedCreateWithoutSubscriptionInput = {
    amountInCents: number
    email: string
    id?: number
    state: ContributionState
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    ambassadorId?: number | null
  }

  export type ContributionCreateOrConnectWithoutsubscriptionInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionUncheckedCreateWithoutSubscriptionInput, ContributionCreateWithoutSubscriptionInput>
  }

  export type UserCreateWithoutContribution_subscriptionsInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    referencedBy?: AmbassadorCreateNestedOneWithoutUserInput
    contributions?: ContributionCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutContribution_subscriptionsInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    id?: number
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    ambassadorId?: number | null
  }

  export type UserCreateOrConnectWithoutcontribution_subscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutContribution_subscriptionsInput, UserCreateWithoutContribution_subscriptionsInput>
  }

  export type AmbassadorUpsertWithoutContributionSubscriptionInput = {
    update: XOR<AmbassadorUncheckedUpdateWithoutContributionSubscriptionInput, AmbassadorUpdateWithoutContributionSubscriptionInput>
    create: XOR<AmbassadorUncheckedCreateWithoutContributionSubscriptionInput, AmbassadorCreateWithoutContributionSubscriptionInput>
  }

  export type AmbassadorUpdateWithoutContributionSubscriptionInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    Contribution?: ContributionUpdateManyWithoutReferencedByInput
    user?: UserUpdateOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedUpdateWithoutContributionSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    Contribution?: ContributionUncheckedUpdateManyWithoutReferencedByInput
    user?: UserUncheckedUpdateOneWithoutReferencedByInput
  }

  export type ContributionUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: ContributionWhereUniqueInput
    update: XOR<ContributionUncheckedUpdateWithoutSubscriptionInput, ContributionUpdateWithoutSubscriptionInput>
    create: XOR<ContributionUncheckedCreateWithoutSubscriptionInput, ContributionCreateWithoutSubscriptionInput>
  }

  export type ContributionUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: ContributionWhereUniqueInput
    data: XOR<ContributionUncheckedUpdateWithoutSubscriptionInput, ContributionUpdateWithoutSubscriptionInput>
  }

  export type ContributionUpdateManyWithWhereWithoutSubscriptionInput = {
    where: ContributionScalarWhereInput
    data: XOR<ContributionUncheckedUpdateManyWithoutContributionsInput, ContributionUpdateManyMutationInput>
  }

  export type ContributionScalarWhereInput = {
    AND?: Enumerable<ContributionScalarWhereInput>
    OR?: Enumerable<ContributionScalarWhereInput>
    NOT?: Enumerable<ContributionScalarWhereInput>
    amountInCents?: IntFilter | number
    email?: StringFilter | string
    id?: IntFilter | number
    state?: EnumContributionStateFilter | ContributionState
    subscriptionId?: IntNullableFilter | number | null
    externalId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    experimentId?: StringNullableFilter | string | null
    ambassadorId?: IntNullableFilter | number | null
  }

  export type UserUpsertWithWhereUniqueWithoutContribution_subscriptionsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUncheckedUpdateWithoutContribution_subscriptionsInput, UserUpdateWithoutContribution_subscriptionsInput>
    create: XOR<UserUncheckedCreateWithoutContribution_subscriptionsInput, UserCreateWithoutContribution_subscriptionsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutContribution_subscriptionsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUncheckedUpdateWithoutContribution_subscriptionsInput, UserUpdateWithoutContribution_subscriptionsInput>
  }

  export type UserUpdateManyWithWhereWithoutContribution_subscriptionsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUncheckedUpdateManyWithoutUsersInput, UserUpdateManyMutationInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    admissionYear?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    degree?: StringFilter | string
    email?: StringFilter | string
    firstName?: StringFilter | string
    id?: IntFilter | number
    lastName?: StringFilter | string
    mentorshipInterest?: BoolFilter | boolean
    tutorshipInterest?: BoolFilter | boolean
    university?: StringFilter | string
    volunteeringInterest?: BoolFilter | boolean
    ambassadorId?: IntNullableFilter | number | null
  }

  export type AmbassadorCreateWithoutContributionInput = {
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionCreateNestedManyWithoutReferencedByInput
    user?: UserCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedCreateWithoutContributionInput = {
    id?: number
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedCreateNestedManyWithoutReferencedByInput
    user?: UserUncheckedCreateNestedOneWithoutReferencedByInput
  }

  export type AmbassadorCreateOrConnectWithoutContributionInput = {
    where: AmbassadorWhereUniqueInput
    create: XOR<AmbassadorUncheckedCreateWithoutContributionInput, AmbassadorCreateWithoutContributionInput>
  }

  export type ContributionSubscriptionCreateWithoutContributionsInput = {
    amountInCents: number
    email: string
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionSubscriptionInput
    users?: UserCreateNestedManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedCreateWithoutContributionsInput = {
    amountInCents: number
    email: string
    id?: number
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    ambassadorId?: number | null
  }

  export type ContributionSubscriptionCreateOrConnectWithoutcontributionsInput = {
    where: ContributionSubscriptionWhereUniqueInput
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutContributionsInput, ContributionSubscriptionCreateWithoutContributionsInput>
  }

  export type UserCreateWithoutContributionsInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    referencedBy?: AmbassadorCreateNestedOneWithoutUserInput
    contribution_subscriptions?: ContributionSubscriptionCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutContributionsInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    id?: number
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    ambassadorId?: number | null
  }

  export type UserCreateOrConnectWithoutcontributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutContributionsInput, UserCreateWithoutContributionsInput>
  }

  export type AmbassadorUpsertWithoutContributionInput = {
    update: XOR<AmbassadorUncheckedUpdateWithoutContributionInput, AmbassadorUpdateWithoutContributionInput>
    create: XOR<AmbassadorUncheckedCreateWithoutContributionInput, AmbassadorCreateWithoutContributionInput>
  }

  export type AmbassadorUpdateWithoutContributionInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUpdateManyWithoutReferencedByInput
    user?: UserUpdateOneWithoutReferencedByInput
  }

  export type AmbassadorUncheckedUpdateWithoutContributionInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedUpdateManyWithoutReferencedByInput
    user?: UserUncheckedUpdateOneWithoutReferencedByInput
  }

  export type ContributionSubscriptionUpsertWithoutContributionsInput = {
    update: XOR<ContributionSubscriptionUncheckedUpdateWithoutContributionsInput, ContributionSubscriptionUpdateWithoutContributionsInput>
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutContributionsInput, ContributionSubscriptionCreateWithoutContributionsInput>
  }

  export type ContributionSubscriptionUpdateWithoutContributionsInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionSubscriptionInput
    users?: UserUpdateManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedUpdateWithoutContributionsInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithWhereUniqueWithoutContributionsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUncheckedUpdateWithoutContributionsInput, UserUpdateWithoutContributionsInput>
    create: XOR<UserUncheckedCreateWithoutContributionsInput, UserCreateWithoutContributionsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutContributionsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUncheckedUpdateWithoutContributionsInput, UserUpdateWithoutContributionsInput>
  }

  export type UserUpdateManyWithWhereWithoutContributionsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUncheckedUpdateManyWithoutUsersInput, UserUpdateManyMutationInput>
  }

  export type AmbassadorCreateWithoutUserInput = {
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionCreateNestedManyWithoutReferencedByInput
    Contribution?: ContributionCreateNestedManyWithoutReferencedByInput
  }

  export type AmbassadorUncheckedCreateWithoutUserInput = {
    id?: number
    isActive: boolean
    createAT?: Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedCreateNestedManyWithoutReferencedByInput
    Contribution?: ContributionUncheckedCreateNestedManyWithoutReferencedByInput
  }

  export type AmbassadorCreateOrConnectWithoutuserInput = {
    where: AmbassadorWhereUniqueInput
    create: XOR<AmbassadorUncheckedCreateWithoutUserInput, AmbassadorCreateWithoutUserInput>
  }

  export type ContributionSubscriptionCreateWithoutUsersInput = {
    amountInCents: number
    email: string
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionSubscriptionInput
    contributions?: ContributionCreateNestedManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUncheckedCreateWithoutUsersInput = {
    amountInCents: number
    email: string
    id?: number
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    ambassadorId?: number | null
    contributions?: ContributionUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionCreateOrConnectWithoutusersInput = {
    where: ContributionSubscriptionWhereUniqueInput
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutUsersInput, ContributionSubscriptionCreateWithoutUsersInput>
  }

  export type ContributionCreateWithoutUsersInput = {
    amountInCents: number
    email: string
    state: ContributionState
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    referencedBy?: AmbassadorCreateNestedOneWithoutContributionInput
    subscription?: ContributionSubscriptionCreateNestedOneWithoutContributionsInput
  }

  export type ContributionUncheckedCreateWithoutUsersInput = {
    amountInCents: number
    email: string
    id?: number
    state: ContributionState
    subscriptionId?: number | null
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    ambassadorId?: number | null
  }

  export type ContributionCreateOrConnectWithoutusersInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionUncheckedCreateWithoutUsersInput, ContributionCreateWithoutUsersInput>
  }

  export type AmbassadorUpsertWithoutUserInput = {
    update: XOR<AmbassadorUncheckedUpdateWithoutUserInput, AmbassadorUpdateWithoutUserInput>
    create: XOR<AmbassadorUncheckedCreateWithoutUserInput, AmbassadorCreateWithoutUserInput>
  }

  export type AmbassadorUpdateWithoutUserInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUpdateManyWithoutReferencedByInput
    Contribution?: ContributionUpdateManyWithoutReferencedByInput
  }

  export type AmbassadorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAT?: DateTimeFieldUpdateOperationsInput | Date | string
    ContributionSubscription?: ContributionSubscriptionUncheckedUpdateManyWithoutReferencedByInput
    Contribution?: ContributionUncheckedUpdateManyWithoutReferencedByInput
  }

  export type ContributionSubscriptionUpsertWithWhereUniqueWithoutUsersInput = {
    where: ContributionSubscriptionWhereUniqueInput
    update: XOR<ContributionSubscriptionUncheckedUpdateWithoutUsersInput, ContributionSubscriptionUpdateWithoutUsersInput>
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutUsersInput, ContributionSubscriptionCreateWithoutUsersInput>
  }

  export type ContributionSubscriptionUpdateWithWhereUniqueWithoutUsersInput = {
    where: ContributionSubscriptionWhereUniqueInput
    data: XOR<ContributionSubscriptionUncheckedUpdateWithoutUsersInput, ContributionSubscriptionUpdateWithoutUsersInput>
  }

  export type ContributionSubscriptionUpdateManyWithWhereWithoutUsersInput = {
    where: ContributionSubscriptionScalarWhereInput
    data: XOR<ContributionSubscriptionUncheckedUpdateManyWithoutContribution_subscriptionsInput, ContributionSubscriptionUpdateManyMutationInput>
  }

  export type ContributionSubscriptionScalarWhereInput = {
    AND?: Enumerable<ContributionSubscriptionScalarWhereInput>
    OR?: Enumerable<ContributionSubscriptionScalarWhereInput>
    NOT?: Enumerable<ContributionSubscriptionScalarWhereInput>
    amountInCents?: IntFilter | number
    email?: StringFilter | string
    id?: IntFilter | number
    state?: EnumSubscriptionStateFilter | SubscriptionState
    externalId?: StringNullableFilter | string | null
    experimentId?: StringNullableFilter | string | null
    ambassadorId?: IntNullableFilter | number | null
  }

  export type ContributionUpsertWithWhereUniqueWithoutUsersInput = {
    where: ContributionWhereUniqueInput
    update: XOR<ContributionUncheckedUpdateWithoutUsersInput, ContributionUpdateWithoutUsersInput>
    create: XOR<ContributionUncheckedCreateWithoutUsersInput, ContributionCreateWithoutUsersInput>
  }

  export type ContributionUpdateWithWhereUniqueWithoutUsersInput = {
    where: ContributionWhereUniqueInput
    data: XOR<ContributionUncheckedUpdateWithoutUsersInput, ContributionUpdateWithoutUsersInput>
  }

  export type ContributionUpdateManyWithWhereWithoutUsersInput = {
    where: ContributionScalarWhereInput
    data: XOR<ContributionUncheckedUpdateManyWithoutContributionsInput, ContributionUpdateManyMutationInput>
  }

  export type ContributionSubscriptionCreateWithoutReferencedByInput = {
    amountInCents: number
    email: string
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    contributions?: ContributionCreateNestedManyWithoutSubscriptionInput
    users?: UserCreateNestedManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedCreateWithoutReferencedByInput = {
    amountInCents: number
    email: string
    id?: number
    state: SubscriptionState
    externalId?: string | null
    experimentId?: string | null
    contributions?: ContributionUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionCreateOrConnectWithoutreferencedByInput = {
    where: ContributionSubscriptionWhereUniqueInput
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput, ContributionSubscriptionCreateWithoutReferencedByInput>
  }

  export type ContributionCreateWithoutReferencedByInput = {
    amountInCents: number
    email: string
    state: ContributionState
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
    subscription?: ContributionSubscriptionCreateNestedOneWithoutContributionsInput
    users?: UserCreateNestedManyWithoutContributionsInput
  }

  export type ContributionUncheckedCreateWithoutReferencedByInput = {
    amountInCents: number
    email: string
    id?: number
    state: ContributionState
    subscriptionId?: number | null
    externalId?: string | null
    createdAt?: Date | string
    experimentId?: string | null
  }

  export type ContributionCreateOrConnectWithoutreferencedByInput = {
    where: ContributionWhereUniqueInput
    create: XOR<ContributionUncheckedCreateWithoutReferencedByInput, ContributionCreateWithoutReferencedByInput>
  }

  export type UserCreateWithoutReferencedByInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
    contribution_subscriptions?: ContributionSubscriptionCreateNestedManyWithoutUsersInput
    contributions?: ContributionCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReferencedByInput = {
    admissionYear: number
    createdAt?: Date | string
    degree: string
    email: string
    firstName: string
    id?: number
    lastName: string
    mentorshipInterest: boolean
    tutorshipInterest: boolean
    university: string
    volunteeringInterest: boolean
  }

  export type UserCreateOrConnectWithoutreferencedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
  }

  export type ContributionSubscriptionUpsertWithWhereUniqueWithoutReferencedByInput = {
    where: ContributionSubscriptionWhereUniqueInput
    update: XOR<ContributionSubscriptionUncheckedUpdateWithoutReferencedByInput, ContributionSubscriptionUpdateWithoutReferencedByInput>
    create: XOR<ContributionSubscriptionUncheckedCreateWithoutReferencedByInput, ContributionSubscriptionCreateWithoutReferencedByInput>
  }

  export type ContributionSubscriptionUpdateWithWhereUniqueWithoutReferencedByInput = {
    where: ContributionSubscriptionWhereUniqueInput
    data: XOR<ContributionSubscriptionUncheckedUpdateWithoutReferencedByInput, ContributionSubscriptionUpdateWithoutReferencedByInput>
  }

  export type ContributionSubscriptionUpdateManyWithWhereWithoutReferencedByInput = {
    where: ContributionSubscriptionScalarWhereInput
    data: XOR<ContributionSubscriptionUncheckedUpdateManyWithoutContributionSubscriptionInput, ContributionSubscriptionUpdateManyMutationInput>
  }

  export type ContributionUpsertWithWhereUniqueWithoutReferencedByInput = {
    where: ContributionWhereUniqueInput
    update: XOR<ContributionUncheckedUpdateWithoutReferencedByInput, ContributionUpdateWithoutReferencedByInput>
    create: XOR<ContributionUncheckedCreateWithoutReferencedByInput, ContributionCreateWithoutReferencedByInput>
  }

  export type ContributionUpdateWithWhereUniqueWithoutReferencedByInput = {
    where: ContributionWhereUniqueInput
    data: XOR<ContributionUncheckedUpdateWithoutReferencedByInput, ContributionUpdateWithoutReferencedByInput>
  }

  export type ContributionUpdateManyWithWhereWithoutReferencedByInput = {
    where: ContributionScalarWhereInput
    data: XOR<ContributionUncheckedUpdateManyWithoutContributionInput, ContributionUpdateManyMutationInput>
  }

  export type UserUpsertWithoutReferencedByInput = {
    update: XOR<UserUncheckedUpdateWithoutReferencedByInput, UserUpdateWithoutReferencedByInput>
    create: XOR<UserUncheckedCreateWithoutReferencedByInput, UserCreateWithoutReferencedByInput>
  }

  export type UserUpdateWithoutReferencedByInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    contribution_subscriptions?: ContributionSubscriptionUpdateManyWithoutUsersInput
    contributions?: ContributionUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutReferencedByInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContributionUpdateWithoutSubscriptionInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionInput
    users?: UserUpdateManyWithoutContributionsInput
  }

  export type ContributionUncheckedUpdateWithoutSubscriptionInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionUncheckedUpdateManyWithoutContributionsInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateWithoutContribution_subscriptionsInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    referencedBy?: AmbassadorUpdateOneWithoutUserInput
    contributions?: ContributionUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutContribution_subscriptionsInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateWithoutContributionsInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    referencedBy?: AmbassadorUpdateOneWithoutUserInput
    contribution_subscriptions?: ContributionSubscriptionUpdateManyWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutContributionsInput = {
    admissionYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    degree?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastName?: StringFieldUpdateOperationsInput | string
    mentorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    tutorshipInterest?: BoolFieldUpdateOperationsInput | boolean
    university?: StringFieldUpdateOperationsInput | string
    volunteeringInterest?: BoolFieldUpdateOperationsInput | boolean
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionSubscriptionUpdateWithoutUsersInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionSubscriptionInput
    contributions?: ContributionUpdateManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUncheckedUpdateWithoutUsersInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: ContributionUncheckedUpdateManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUncheckedUpdateManyWithoutContribution_subscriptionsInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionUpdateWithoutUsersInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    referencedBy?: AmbassadorUpdateOneWithoutContributionInput
    subscription?: ContributionSubscriptionUpdateOneWithoutContributionsInput
  }

  export type ContributionUncheckedUpdateWithoutUsersInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    subscriptionId?: NullableIntFieldUpdateOperationsInput | number | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    ambassadorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContributionSubscriptionUpdateWithoutReferencedByInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: ContributionUpdateManyWithoutSubscriptionInput
    users?: UserUpdateManyWithoutContribution_subscriptionsInput
  }

  export type ContributionSubscriptionUncheckedUpdateWithoutReferencedByInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    contributions?: ContributionUncheckedUpdateManyWithoutSubscriptionInput
  }

  export type ContributionSubscriptionUncheckedUpdateManyWithoutContributionSubscriptionInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumSubscriptionStateFieldUpdateOperationsInput | SubscriptionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContributionUpdateWithoutReferencedByInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: ContributionSubscriptionUpdateOneWithoutContributionsInput
    users?: UserUpdateManyWithoutContributionsInput
  }

  export type ContributionUncheckedUpdateWithoutReferencedByInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    subscriptionId?: NullableIntFieldUpdateOperationsInput | number | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContributionUncheckedUpdateManyWithoutContributionInput = {
    amountInCents?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    state?: EnumContributionStateFieldUpdateOperationsInput | ContributionState
    subscriptionId?: NullableIntFieldUpdateOperationsInput | number | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}